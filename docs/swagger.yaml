basePath: /task-service
definitions:
  model.LoginRequest:
    properties:
      email:
        example: test@gmail.com
        type: string
      password:
        example: test
        type: string
    type: object
  model.LoginResponse:
    properties:
      data:
        properties:
          token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2NmY1ODY1NjhiYTAxYjBkOGQ4MzFjMjUiLCJleHAiOjUxNjc2MzY4NzB9.s4U-8Hl6s3hTr0n0Zb9FbYLEGCwO4k5pL5trZxd6AeI
            type: string
        type: object
      message:
        example: user login successfully
        type: string
      status:
        example: 1
        type: integer
    type: object
  model.MarkDoneRequest:
    properties:
      task_ids:
        example:
        - 60d5ec49c6d8c06e1f20c5a8
        items:
          type: string
        type: array
    type: object
  model.MarkTasksAsDoneResponse:
    properties:
      data:
        example:
        - Task 60d5ec49c6d8c06e1f20c5a8 marked as done.
        items:
          type: string
        type: array
      message:
        example: Tasks processed.
        type: string
      status:
        example: 1
        type: integer
    type: object
  model.RegisterRequest:
    properties:
      email:
        example: test@gmail.com
        type: string
      name:
        example: test user
        type: string
      password:
        example: test
        type: string
    type: object
  model.RegisterResponse:
    properties:
      data:
        example: "null"
        type: string
      message:
        example: user register successfully
        type: string
      status:
        example: 1
        type: integer
    type: object
  model.ServerError401:
    properties:
      data:
        example: "null"
        type: string
      message:
        example: Unauthorized access
        type: string
      status:
        example: 0
        type: integer
    type: object
  model.ServerError500:
    properties:
      data:
        example: "null"
        type: string
      message:
        example: internal server error
        type: string
      status:
        example: 0
        type: integer
    type: object
  model.Task:
    properties:
      createdAt:
        example: "2024-09-27T14:09:53.259915568+05:30"
        type: string
      description:
        example: task description
        type: string
      id:
        example: 60d5ec49c6d8c06e1f20c5a8
        type: string
      status:
        description: '"todo", "in progress", "done"'
        example: todo / in progress / done
        type: string
      title:
        example: task title
        type: string
      userID:
        example: 667bd3d9df5113761db9b247
        type: string
    type: object
  model.TaskCreateRequest:
    properties:
      description:
        example: task description
        type: string
      status:
        description: '"todo", "in progress", "done"'
        example: todo / in progress / done
        type: string
      title:
        example: task title
        type: string
    type: object
  model.TaskCreateResponse:
    properties:
      data:
        example: 60d5ec49c6d8c06e1f20c5a8
        type: string
      message:
        example: Task created successfully.
        type: string
      status:
        example: 1
        type: integer
    type: object
  model.TaskDeleteResponse:
    properties:
      data:
        example: "null"
        type: string
      message:
        example: Task deleted successfully
        type: string
      status:
        example: 1
        type: integer
    type: object
  model.TaskListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Task'
        type: array
      message:
        example: Task list retrieved successfully.
        type: string
      status:
        example: 1
        type: integer
    type: object
  model.TaskReadResponse:
    properties:
      data:
        $ref: '#/definitions/model.Task'
      message:
        example: Task retrieved successfully.
        type: string
      status:
        example: 1
        type: integer
    type: object
  model.TaskUpdateRequest:
    properties:
      description:
        description: Description of the task
        example: task description
        type: string
      status:
        description: Status of the task  "todo", "in progress", "done"
        example: todo / in progress / done
        type: string
      title:
        description: Title of the task
        example: task title
        type: string
    type: object
  model.TaskUpdateResponse:
    properties:
      data:
        example: "null"
        type: string
      message:
        example: Task updated successfully
        type: string
      status:
        example: 1
        type: integer
    type: object
  util.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
host: 127.0.0.1:8082
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Task management server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Task management api
  version: "1.0"
paths:
  /login:
    post:
      description: user login
      parameters:
      - description: login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user login successfully
          schema:
            $ref: '#/definitions/model.LoginResponse'
      summary: user login
      tags:
      - User
  /register:
    post:
      description: user registration
      parameters:
      - description: register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: user register successfully
          schema:
            $ref: '#/definitions/model.RegisterResponse'
      summary: user registration
      tags:
      - User
  /task:
    get:
      description: Retrieve all tasks for a user with optional filters
      parameters:
      - description: token value
        in: header
        name: auth-token
        required: true
        type: string
      - description: Limit of tasks to retrieve
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Filter by task status
        in: query
        name: status
        type: string
      - description: Field to sort by
        in: query
        name: sort
        type: string
      - description: Order of sorting (1 for ascending, -1 for descending)
        in: query
        name: sortOrder
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task created successfully
          schema:
            $ref: '#/definitions/model.TaskListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ServerError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ServerError500'
      summary: List all tasks
      tags:
      - Task
    post:
      description: Create a new task for a user
      parameters:
      - description: token value
        in: header
        name: auth-token
        required: true
        type: string
      - description: Task creation request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.TaskCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            $ref: '#/definitions/model.TaskCreateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ServerError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ServerError500'
      summary: Create a task
      tags:
      - Task
  /task/{id}:
    delete:
      description: Remove a task from the system by its ID
      parameters:
      - description: token value
        in: header
        name: auth-token
        required: true
        type: string
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
          schema:
            $ref: '#/definitions/model.TaskDeleteResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ServerError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ServerError500'
      summary: Delete a task by ID
      tags:
      - Task
    get:
      description: Get the details of a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: token value
        in: header
        name: auth-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task created successfully
          schema:
            $ref: '#/definitions/model.TaskReadResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ServerError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ServerError500'
      summary: Retrieve a task by ID
      tags:
      - Task
    put:
      description: Update the details of a task by its ID
      parameters:
      - description: token value
        in: header
        name: auth-token
        required: true
        type: string
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task update request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.TaskUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task updated successfully
          schema:
            $ref: '#/definitions/model.TaskUpdateResponse'
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ServerError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ServerError500'
      summary: Update a task by ID
      tags:
      - Task
  /tasks/mark-done:
    put:
      description: Mark multiple tasks as done for a user
      parameters:
      - description: token value
        in: header
        name: auth-token
        required: true
        type: string
      - description: Task IDs to mark as done
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.MarkDoneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tasks marked as done successfully
          schema:
            $ref: '#/definitions/model.MarkTasksAsDoneResponse'
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ServerError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ServerError500'
      summary: Mark multiple tasks as done
      tags:
      - Task
swagger: "2.0"
